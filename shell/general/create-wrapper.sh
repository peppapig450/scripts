#!/usr/bin/env bash
# ---------------------------------------------------------------------------
#  create-wrapper.sh
#
#  Generate a tiny launcher in $BIN_DIR that runs a target Python script.
#  The launcher lets you invoke the script from anywhere as a normal command.
#
#  Usage:
#     create-wrapper.sh -s <name> -p <path> [-d <bin_dir>] [-r]
#
#  Options:
#     -s  Base name of the Python script (without .py extension).
#     -p  Directory in which to search (recursively) for <name>.py.
#     -d  Directory to place the wrapper (default: ~/.local/bin).
#     -r  Create a relative symlink + wrapper instead of embedding an
#         absolute path (useful if the tree may be moved as a unit).
#     -h  Show help.
#
#  Exit codes:
#     0   success
#     1   argument or runtime error
# ---------------------------------------------------------------------------
set -euo pipefail
shopt -s globstar nullglob      # enable ** recursive globbing (needed by find_script)

# ============================================
# Helper functions
# ============================================

usage() {
  # Display help and exit
  cat <<CLOSEENOUGH
Usage: $0 -s <name> -p <path> [-d <bin_dir>] [-r]

Generate a wrapper that executes <path>/<name>.py.

  -s  Script base name (without .py)
  -p  Directory containing the script (searched recursively)
  -d  Where to install the wrapper (default: ~/.local/bin)
  -r  Use a relative symlink instead of an absolute file path
  -h  Show this help
CLOSEENOUGH
  exit 1
}

in_path() {
  # Return success if the first argument appears verbatim in PATH
  local dir="${1}"
  [[ ":${PATH}:" == *":${dir}:"* ]]
}

verify_bin_dir() {
  # Ensure $1 exists; offer to create it and warn if not in PATH
  local dir="${1}"
  if [[ ! -d ${dir} ]]; then
    read -rp "${dir} does not exist. Create it? [y/N] " ans
    [[ ${ans} =~ ^[Yy] ]] || return 1
    mkdir -p "${dir}"
  fi

  # shellcheck disable=SC2310
  if ! in_path "${dir}"; then
    printf "%s is not in \$PATH.\n" "${dir}"
    printf 'Add to your profile:\n  export PATH="%s:\$PATH"\n' "${dir}"
  fi
}

find_script() {
  # Locate <name>.py inside <path>, returning the absolute path via stdout.
  local name="${1}"
  local search_dir="${2}"
  
  if [[ -f ${search_dir}/${name}.py ]]; then
    realpath "${search_dir}/${name}.py"
    return 0
  fi

  # Recursive glob; fail if zero or multiple matches.
  mapfile -t matches < <(printf '%s\n' "${search_dir}"/**/"${name}.py")
  case ${#matches[@]} in 
    0) printf 'Error: %s.py not found under %s\n' "${name}" "${search_dir}" >&2; return 1 ;;
    1) realpath "${matches[0]}" ;;
    *) printf 'Error: Multiple %s.py found under %s\n' "${name}" "${search_dir}" >&2; return 1 ;;
  esac
}

choose_python() {
  # Echo the preferred Python executable.
  if command -v python3 >/dev/null 2>&1; then
    echo python3
  elif command -v python >/dev/null 2>&1; then
    echo python
  else
    printf 'Error: No python interpreter found in PATH\n' >&2
    return 1
  fi
}

create_wrapper() {
  # Create the wrapper script and (optionally) a relative symlink.
  local script_name="${1}"
  local abs_script_path="${2}"
  local bin_dir="${3}"
  local use_relative="${4}"

  local target_path="${abs_script_path}"
  local wrapper_path="${bin_dir}/${script_name}"
  local python_exec
  python_exec="$(choose_python)"

  # Optional symlink pointing from $bin_dir/$script_name.py -> absolute script
  if [[ ${use_relative} == true ]]; then
    ln -srn "${abs_script_path}" "${bin_dir}/${script_name}.py"
    target_path="${script_name}.py" # Wrapper will find it relative to itself
  fi

  # Remove incomplete wrapper if anything below fails.
  trap 'rm -f "${wrapper_path}"' ERR

  cat >"${wrapper_path}" <<WRAPMEPLS
#!/usr/bin/env bash
# Auto generated by create-wrapper.sh - DO NOT EDIT.
# Executes the real Python script next to this wrapper.

exec "${python_exec}" "\${BASH_SOURCE[0]%/*}/${target_path}" "\$@"
WRAPMEPLS

  chmod u+x "${wrapper_path}"
  printf 'Wrapper created at %s\n' "${wrapper_path}"
}

# ===========================
# Main
# ===========================

main() {
  local DEFAULT_BIN_DIR="${HOME}/.local/bin"
  local bin_dir="${DEFAULT_BIN_DIR}"
  local script_name='' script_path='' use_relative=false

  # Parse options
  while getopts ':s:p:d:rh' opt; do
    case "${opt}" in
      s) script_name="${OPTARG}" ;;
      p) script_path="${OPTARG}" ;;
      d) bin_dir="${OPTARG}" ;;
      r) use_relative=true ;;
      h) usage ;;
      *) usage ;;
    esac
  done

  [[ -n ${script_name} && -n ${script_path} ]] || { echo 'Missing -s or -p'; usage; }

  # Prep target directory
  verify_bin_dir "${bin_dir}"

  # Locate the Python script
  local abs_script
  abs_script="$(find_script "${script_name}" "${script_path}")" || exit 1

  # Build the wrapper
  create_wrapper "${script_name}" "${abs_script}" "${bin_dir}" "${use_relative}"
}

main "$@"
